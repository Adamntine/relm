# Staging: staging.relm.us
server {
  root /var/www/html/relm-staging;
  index index.php index.html index.htm;

  server_name staging.relm.us;

  location = /search {
    try_files /search.html =404;
  }

  set $index index.html;

  # Facebook in-app browser detect
  if ($http_user_agent ~* ".*FBA[NV].*") {
    set $index facebook.html;
  }

  # Instagram in-app browser detect
  if ($http_user_agent ~* ".*Instagram.*") {
    # TODO: make a custom instagram.html explainer page
    set $index facebook.html;
  }

  # Default: Rewrite any /[relm] to index.html
  location / {
    rewrite ^/([^\.]*)$ /$index last;
    try_files $uri $uri/ =404;
  }

  error_page 404 /404.html;
  error_page 500 502 503 504 /50x.html;
  location = /50x.html {
    root /usr/share/nginx/html;
  }

  include /etc/nginx/poor-brotli.conf;


  listen 443 ssl; # managed by Certbot
  ssl_certificate /etc/letsencrypt/live/staging.relm.us/fullchain.pem; # managed by Certbot
  ssl_certificate_key /etc/letsencrypt/live/staging.relm.us/privkey.pem; # managed by Certbot
  include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}


# Staging y-websocket server: y-staging.relm.us
server {
  listen 80 ;
  # listen [::]:80 ipv6only=on;

  root /var/www/html;
  index index.php index.html index.htm;

  server_name y-staging.relm.us;

  # Assuming data assets are hosted in /home/relmstaging, we can speed things
  # up a bit by allowing nginx to fetch files directly
  location /asset {
    add_header "Access-Control-Allow-Origin" * always;
    rewrite ^/asset/(.*) /$1 break;
    root /home/relmstaging/data/assets;
  }

  location / {
    proxy_pass http://localhost:1236;
    include snippets/websocket-proxy-pass.conf;
  }

  error_page 413 @filetoobig;
  error_page 404 /404.html;
  error_page 500 502 503 504 /50x.html;
  location = /50x.html {
    root /usr/share/nginx/html;
  }

  location @filetoobig {
    add_header Access-Control-Allow-Origin * always;
  }

  location = /404.html {
    add_header Access-Control-Allow-Origin * always;
  }

  listen 443 ssl; # managed by Certbot
  ssl_certificate /etc/letsencrypt/live/y-staging.relm.us/fullchain.pem; # managed by Certbot
  ssl_certificate_key /etc/letsencrypt/live/y-staging.relm.us/privkey.pem; # managed by Certbot
  include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}


# Staging redirect to HTTPS
server {
  if ($host = staging.relm.us) {
    return 301 https://$host$request_uri;
  } # managed by Certbot

  server_name staging.relm.us;
  
  listen 80;
  return 404; # managed by Certbot
}
